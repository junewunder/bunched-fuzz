// THIS EXAMPLE WILL FAIL WITH A PARSE ERROR
// in principle this should work but the original implementation
// does not allow for multiplication or addition in list size terms

function seq
  forall (A, n : size, p : space)
    (l :[p] list(fuzzy A)[n])
  : fuzzy list(A)[2 * n] {
  listcase l of fuzzy list(A)[2 * n] {
    [] => return[p] (nil@[A] ())
    | x :: l'[n'] =>
      sample y = x;
      sample ys = seq@[A][n'][p] l';
      return[p] (cons@[A][1 + (2 * n')] y (cons@[A][(2 * n')] y ys))
  }
}

seq