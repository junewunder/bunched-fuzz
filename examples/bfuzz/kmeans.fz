function seq
  forall (A, p : space)
    (l :[p][1.0] plist(fuzzy A)[p])
  : fuzzy plist(A)[p] {
  plistcase l of fuzzy plist(A)[p] {
    [] => return@[plist(A)[p]][p] (pnil@[A][p] ())
    | pair =>
      let (x, l') = pair;
      sample y = x;
      sample ys = seq@[A][p] l';
      return@[plist(A)[p]][p] (pcons@[A][p] (y ,[p] ys))
  }
}

function pmap
  forall (A, B, s : sens, p : space)
    (f :[p][inf] (A -o[p][s] B))
    (l :[p][s] plist(A)[p])
  : plist(B)[p] {
    plistcase l of plist(B)[p] {
      []          => pnil@[B][p] ()
    | xs =>
      let (y, ys) = xs;
      pcons@[B][p] ((f y) ,[p] (pmap@[A]@[B][s][p] f ys))
  }
}
primitive add_noise
  forall (e : sens, p : space)
    (eps :[p][inf] num[e])
    (x :[p][e] num)
  : fuzzy num
  { "add_noise" }

primitive assign
  forall (p : space)
    (ms :[p][inf] plist((num ,[p] num))[p])
    (b :[p][1.0] (num ,[p] num) bag)
  : ((num ,[p] num) ,[p] int) bag
  { "assign" }

primitive partition
  forall (p : space)
    (labelled_pts :[p][1.0] ((num ,[p] num) ,[p] int) bag)
  : plist((num ,[p] num) bag)[p]
  { "partition" }

primitive totx
  forall (p : space)
    (pts :[p][1.0] (num ,[p] num) bag)
  : num
  { "totx" }

primitive toty
  forall (p : space)
    (pts :[p][1.0] (num ,[p] num) bag)
  : num
  { "toty" }

function pzip
  forall (A, B, p : space)
    (xs :[p][1.0] plist(A)[p])
    (ys :[p][1.0] plist(B)[p])
  : plist((A ,[p] B))[p]
  {
    plistcase xs of plist((A,[p] B))[p] {
      [] => pnil@[(A,[p]B)][p] ()
    | pair_x =>
      plistcase ys of plist((A,[p] B))[p] {
        [] => pnil@[(A,[p]B)][p] ()
      | pair_y =>
        let (x, xs') = pair_x;
        let (y, ys') = pair_y;
        rec :[1.0] =[p] pzip@[A]@[B][p] xs' ys';
        pcons@[(A ,[p] B)][p] ((x ,[p] y) ,[p] rec)
      }
    }
  }

function avg
  forall (p : space)
    (xyt :[p][1.0] ((fuzzy num ,[p] fuzzy num) ,[p] fuzzy num))
  : fuzzy (num ,[p] num) {
    let (xy, t) = xyt;
    let (x, y) = xy;
    sample x' = x;
    sample y' = y;
    sample t' = t;
    return@[(num ,[p] num)][p] ((op_div[p] x' t') ,[p] (op_div[p] y' t'))
  }

primitive bagsize forall(A, p : space) (b :[p][1.0] A bag) : num { "bagsize" }

function iterate
  forall (e : sens, p : space)
    (eps :[p][inf] num[e])
    (b :[p][root[p](3) * e] (num,[p] num) bag)
    (ms :[p][inf] plist((num,[p] num))[p])
    : fuzzy plist((num,[p] num))[p]
  {
    b':[root[p](3) * e] =[p] partition[p] (assign[p] ms b);

    tx:[1.0] =[p] pmap@[num]@[fuzzy num][e][p] (add_noise[e][p] eps)
                    (pmap@[(num ,[p] num) bag]@[num][1.0][p] totx[p] b');

    ty:[1.0] =[p] pmap@[num]@[fuzzy num][e][p] (add_noise[e][p] eps)
                    (pmap@[(num ,[p] num) bag]@[num][1.0][p] toty[p] b');

    t:[1.0] =[p] pmap@[num]@[fuzzy num][e][p] (add_noise[e][p] eps)
                  (pmap@[(num ,[p] num) bag]@[num][1.0][p] bagsize@[(num,[p] num)][p] b');

    stats:[1.0] =[p] pzip@[(fuzzy num ,[p] fuzzy num)]@[fuzzy num][p] (pzip@[fuzzy num]@[fuzzy num][p] tx ty) t;

    avgs:[1.0] =[p] pmap@[((fuzzy num ,[p] fuzzy num) ,[p] fuzzy num)]
                      @[fuzzy(num ,[p] num)]
                      [1.0][p]
                      avg[p]
                      stats;
    seq@[(num ,[p] num)][p] avgs
  }

function kmeans
  forall (i : size, e : sens, p : space)
    (iters   :[p][1] nat[i])
    (eps     :[p][inf] num[e])
    (db      :[p][root[p](3) * i * e] (num,[p] num) bag)
    (centers :[p][inf] plist((num,[p] num))[p])
  : fuzzy plist((num,[p] num))[p] {
    numcase iters of fuzzy plist((num,[p] num))[p] {
        Z      => return@[plist((num,[p] num))[p]][p] centers
      | S n[ii] =>
        sample next_centers = kmeans[ii][e][p] n eps db centers;
        iterate[e][p] eps db next_centers
    }
  }

kmeans
