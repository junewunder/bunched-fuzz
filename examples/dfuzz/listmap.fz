function map
  forall (A, B, i : size, s : sens)
  (f :[i] (A -o[s] B))
  (l :[s] list(A)[i])
  : list(B)[i] {

  listcase l of list(B)[i] {
    []          => nil@[B] ()
  | x :: xs [m] => cons@[B][m] (f x) (map@[A]@[B][m][s] f xs)
  }
}

function addOne (n : num) : num {
  1.0 + n
}

map
